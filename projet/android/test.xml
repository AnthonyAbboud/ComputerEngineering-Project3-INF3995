
package com.example.mounia.client;


import android.Manifest;
import android.location.Location;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.mapbox.mapboxsdk.annotations.MarkerOptions;
import com.mapbox.mapboxsdk.camera.CameraPosition;
import com.mapbox.mapboxsdk.geometry.LatLng;
import com.mapbox.mapboxsdk.geometry.LatLngBounds;
import com.mapbox.mapboxsdk.maps.OnMapReadyCallback;
import com.mapbox.mapboxsdk.Mapbox;
import com.mapbox.mapboxsdk.constants.Style;
import com.mapbox.mapboxsdk.maps.MapView;
import com.mapbox.mapboxsdk.maps.MapboxMap;


import com.mapbox.mapboxsdk.Mapbox;
import com.mapbox.mapboxsdk.camera.CameraUpdateFactory;
import com.mapbox.mapboxsdk.offline.OfflineManager;
import com.mapbox.mapboxsdk.offline.OfflineRegion;
import com.mapbox.mapboxsdk.offline.OfflineRegionError;
import com.mapbox.mapboxsdk.offline.OfflineRegionStatus;
import com.mapbox.mapboxsdk.offline.OfflineTilePyramidRegionDefinition;

import static android.content.ContentValues.TAG;


/**
* Created by mounianordine on 18-03-09.
*/


// key AIzaSyA0U1j7S6oT9GwRB-WKkNeDtXftQKAliCs

public class FragmentMap extends Fragment{
private static final String ARG_SECTION_NUMBER = "section_number";
private MapView mapView;
private LatLng locationOne, locationTwo, locationThree, locationFour;



public FragmentMap() {
// Required empty public constructor
}

@Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

Mapbox.getInstance(getActivity(), "pk.eyJ1IjoibW9ub3IiLCJhIjoiY2pleXZtajNtMDNxejJxb2ExZ2dlczB1ZiJ9.f-dBeUfaMbgZtH1GB_80tw");

}


@Override
public View onCreateView(LayoutInflater inflater, ViewGroup container,
Bundle savedInstanceState) {
View layout = inflater.inflate(R.layout.layout_map, container, false);

mapView = (MapView) layout.findViewById(R.id.mapView);
mapView.onCreate(savedInstanceState);
mapView.getMapAsync(new OnMapReadyCallback() {
@Override
public void onMapReady(MapboxMap mapboxMap) {

// Set map style
mapboxMap.setStyleUrl(Style.MAPBOX_STREETS);

locationOne = new LatLng(32.9401475,-106.9193209, 152);
locationTwo = new LatLng(32.3417429,-106.7628682,53);
locationThree = new LatLng(32.2799304,-106.7468314,67);
locationFour = new LatLng(46.0035479,-72.7311097,422);

mapboxMap.addMarker(new MarkerOptions().position(locationOne).title("Spareport America"));
mapboxMap.addMarker(new MarkerOptions().position(locationTwo).title("Motel 6"));
mapboxMap.addMarker(new MarkerOptions().position(locationThree).title("Convention Center"));
mapboxMap.addMarker(new MarkerOptions().position(locationFour).title("St-Pie de Guire"));


// Set the camera's starting position
CameraPosition cameraPosition = new CameraPosition.Builder().target(locationThree) // set the camera's center position
.zoom(2)  // set the camera's zoom level
.tilt(40)  // set the camera's tilt
.build();

// Move the camera to that position
mapboxMap.moveCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));

getDeviceLocation();

}


});
return layout;
}


public static  FragmentMap newInstance(int sectionNumber) {
FragmentMap fragment = new FragmentMap();
Bundle args = new Bundle();
args.putInt(ARG_SECTION_NUMBER, sectionNumber);
fragment.setArguments(args);
return fragment;
}


@Override
public void onSaveInstanceState(Bundle outState) {
super.onSaveInstanceState(outState);
mapView.onSaveInstanceState(outState);
}



@Override
public void onStart() {
super.onStart();
mapView.onStart();
}

@Override
public void onResume() {
super.onResume();
mapView.onResume();
}

@Override
public void onPause() {
super.onPause();
mapView.onPause();
}

@Override
public void onDestroy() {
super.onDestroy();
mapView.onDestroy();
}

@Override
public void onLowMemory()
{
super.onLowMemory();
mapView.onLowMemory();
}


private Boolean mLocationPermissionsGranted = false;
private GoogleMap mMap;
private FusedLocationProviderClient mFusedLocationProviderClient;
private static final String TAG = "MapActivity";

private static final String FINE_LOCATION = Manifest.permission.ACCESS_FINE_LOCATION;
private static final String COURSE_LOCATION = Manifest.permission.ACCESS_COARSE_LOCATION;
private static final int LOCATION_PERMISSION_REQUEST_CODE = 1234;

private void getDeviceLocation(){
Log.d(TAG, "getDeviceLocation: getting the devices current location");

mFusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(getActivity());

try{
if(mLocationPermissionsGranted){

final Task location = mFusedLocationProviderClient.getLastLocation();
location.addOnCompleteListener(new OnCompleteListener() {
@Override
public void onComplete(@NonNull Task task) {
if(task.isSuccessful()){
Log.d(TAG, "onComplete: found location!");
Location currentLocation = (Location) task.getResult();

//moveCamera(new LatLng(currentLocation.getLatitude(), currentLocation.getLongitude()),
//15f);
//Toast.makeText(getContext(), "Latitude: "+currentLocation.getLatitude()+ "  Longitude: "+ currentLocation.getLongitude(), Toast.LENGTH_LONG).show();
Log.d(TAG, "Latitude: "+currentLocation.getLatitude()+ "  Longitude: "+ currentLocation.getLongitude());
}else{
Log.d(TAG, "onComplete: current location is null");
Toast.makeText(getActivity(), "unable to get current location", Toast.LENGTH_SHORT).show();
}
}
});
}
}catch (SecurityException e){
Log.e(TAG, "getDeviceLocation: SecurityException: " + e.getMessage() );
}
}

}
